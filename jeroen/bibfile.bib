
@mastersthesis{Rouwen2018,
  title = {Lunar Zebro - Software Design Of The Locomotion Sub-System With The Dezyne Model Driven Development Tool},
	school = {Delft University of Technology},
  author = {Rouwen, Floris},
	year = {2018}
}

@inproceedings{ostrand_distribution_2002,
	series = {{ISSTA} '02},
	title = {The {Distribution} of {Faults} in a {Large} {Industrial} {Software} {System}},
	doi = {10.1145/566172.566181},
	booktitle = {Proceedings of the 2002 {ACM} {SIGSOFT} {International} {Symposium} on {Software} {Testing} and {Analysis}},
	publisher = {ACM},
	author = {Ostrand, Thomas J. and Weyuker, Elaine J.},
	year = {2002},
	keywords = {\_tablet, empirical study, fault-prone, pareto, software faults, software testing},
	pages = {55--64},

}


@inproceedings{ostrand_where_2004,
	address = {New York, NY, USA},
	series = {{ISSTA} '04},
	title = {Where the {Bugs} {Are}},
	isbn = {978-1-58113-820-7},
	url = {http://doi.acm.org/10.1145/1007512.1007524},
	doi = {10.1145/1007512.1007524},
	abstract = {The ability to predict which files in a large software system are most likely to contain the largest numbers of faults in the next release can be a very valuable asset. To accomplish this, a negative binomial regression model using information from previous releases has been developed and used to predict the numbers of faults for a large industrial inventory system. The files of each release were sorted in descending order based on the predicted number of faults and then the first 20\% of the files were selected. This was done for each of fifteen consecutive releases, representing more than four years of field usage. The predictions were extremely accurate, correctly selecting files that contained between 71\% and 92\% of the faults, with the overall average being 83\%. In addition, the same model was used on data for the same system's releases, but with all fault data prior to integration testing removed. The prediction was again very accurate, ranging from 71\% to 93\%, with the average being 84\%. Predictions were made for a second system, and again the first 20\% of files accounted for 83\% of the identified faults. Finally, a highly simplified predictor was considered which correctly predicted 73\% and 74\% of the faults for the two systems.},
	urldate = {2018-08-09},
	booktitle = {Proceedings of the 2004 {ACM} {SIGSOFT} {International} {Symposium} on {Software} {Testing} and {Analysis}},
	publisher = {ACM},
	author = {Ostrand, Thomas J. and Weyuker, Elaine J. and Bell, Robert M.},
	year = {2004},
	keywords = {\_tablet, empirical study, fault-prone, software faults, software testing, prediction, regression model},
	pages = {86--96},
	file = {Ostrand et al - 2004 - Where the Bugs Are.pdf:/Users/JKE/SurfDrive/Papers/Zotero/O/Ostrand et al - 2004 - Where the Bugs Are.pdf:application/pdf}
}

@misc{ntsb_2018,
title = {PRELIMINARY REPORT HIGHWAY
{HWY18FH011}},
url = {https://www.ntsb.gov/investigations/AccidentReports/Reports/HWY18FH011-preliminary.pdf},
author = {NTSB},
year = {2018},
}

@misc{facebook_bug_2017,
url = {https://www.businessinsider.nl/facebook-fixes-bug-messenger-apps-drained-android-users-batteries-david-marcus-2017-1},
title = {Facebook has fixed a bug in its apps that was draining users' phone batteries extremely fast},
author = {Rob Price},
publisher = {Business Insider},
year = {2018}
}

@misc{glitch_2012,
url = {https://www.ft.com/content/928a1528-1859-11e2-80e9-00144feabdc0},
title = {Knight Capital glitch loss hits \$461m},
author = {Arash Massoudi},
year = 2012,
publisher = {Financial Times}
}


@article{hwong_formalising_2013,
	title = {Formalising and analysing the control software of the {Compact} {Muon} {Solenoid} {Experiment} at the {Large} {Hadron} {Collider}},
	volume = {78},
	issn = {0167-6423},
	doi = {https://doi.org/10.1016/j.scico.2012.11.009},
	number = {12},
	journal = {Science of Computer Programming},
	author = {Hwong, Yi Ling and Keiren, Jeroen J. A. and Kusters, Vincent J. J. and Leemans, Sander and Willemse, Tim A. C.},
	year = {2013},
	keywords = {Bounded model checking, Case study, Model transformations, Process algebra, SML},
	pages = {2435 -- 2452},
	annote = {Special Section on International Software Product Line Conference 2010 and Fundamentals of Software Engineering (selected papers of FSEN 2011)}
}

@incollection{Madlener10,
  TITLE = {A formal verification study on the {R}otterdam storm surge barrier},
  AUTHOR = {Madlener, Ken and Smetsers, Sjaak and van Eekelen, Marko},
  BOOKTITLE = {Proceedings of the 12th International Conference on Formal Engineering Methods (IFCEM'10)},
  EDITOR = {Jin Song Dong and Huibiao Zhu},
  SERIES = {LNCS},
  VOLUME = {6447},
  PAGES = {287--302},
  YEAR = {2010},
  PUBLISHER = {Springer}
}

@InProceedings{fiterau_2016,
author="Fiter{\u{a}}u-Bro{\c{s}}tean, Paul
and Janssen, Ramon
and Vaandrager, Frits",
editor="Chaudhuri, Swarat
and Farzan, Azadeh",
title="Combining Model Learning and Model Checking to Analyze TCP Implementations",
booktitle="Computer Aided Verification",
year="2016",
publisher="Springer International Publishing",
address="Cham",
pages="454--471",
abstract="We combine model learning and model checking in a challenging case study involving Linux, Windows and FreeBSD implementations of TCP. We use model learning to infer models of different software components and then apply model checking to fully explore what may happen when these components (e.g. a Linux client and a Windows server) interact. Our analysis reveals several instances in which TCP implementations do not conform to their RFC specifications.",
isbn="978-3-319-41540-6"
}

@InProceedings{SLAM,
author="Ball, Thomas
and Cook, Byron
and Levin, Vladimir
and Rajamani, Sriram K.",
editor="Boiten, Eerke A.
and Derrick, John
and Smith, Graeme",
title="SLAM and Static Driver Verifier: Technology Transfer of Formal Methods inside Microsoft",
booktitle="Integrated Formal Methods",
year="2004",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="1--20",
abstract="The SLAM project originated in Microsoft Research in early 2000. Its goal was to automatically check that a C program correctly uses the interface to an external library. The project used and extended ideas from symbolic model checking, program analysis and theorem proving in novel ways to address this problem. The SLAM analysis engine forms the core of a new tool called Static Driver Verifier (SDV) that systematically analyzes the source code of Windows device drivers against a set of rules that define what it means for a device driver to properly interact with the Windows operating system kernel.",
isbn="978-3-540-24756-2"
}

@InProceedings{T2,
author="Brockschmidt, Marc
and Cook, Byron
and Ishtiaq, Samin
and Khlaaf, Heidy
and Piterman, Nir",
editor="Chechik, Marsha
and Raskin, Jean-Fran{\c{c}}ois",
title="T2: Temporal Property Verification",
booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
year="2016",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="387--393",
abstract="We present the open-source tool T2, the first public release from the TERMINATOR projectÂ [9]. T2 has been extended over the past decade to support automatic temporal-logic proving techniques and to handle a general class of user-provided liveness and safety properties. Input can be provided in a native format and in C, via the support of the LLVM compiler framework. We briefly discuss T2's architecture, its underlying techniques, and conclude with an experimental illustration of its competitiveness and directions for future extensions.",
isbn="978-3-662-49674-9"
}



@InProceedings{dezyne_mcrl2,
author="van Beusekom, Rutger
and Groote, Jan Friso
and Hoogendijk, Paul
and Howe, Robert
and Wesselink, Wieger
and Wieringa, Rob
and Willemse, Tim A. C.",
editor="Petrucci, Laure
and Seceleanu, Cristina
and Cavalcanti, Ana",
title="Formalising the Dezyne Modelling Language in mCRL2",
booktitle="Critical Systems: Formal Methods and Automated Verification",
year="2017",
publisher="Springer International Publishing",
address="Cham",
pages="217--233",
abstract="Dezyne is an industrial language with an associated set of tools, allowing users to model interface behaviours and implementations of reactive components and generate executable code from these. The tool and language succeed the successful ASD:Suite tool set, which, in addition to modelling reactive components, offers a set of verification capabilities allowing users to check the conformance of implementations to their interfaces. In this paper, we describe the Dezyne language and a model transformation to the mCRL2 language, providing users access to advanced model checking capabilities and refinement checks of the mCRL2 tool set.",
isbn="978-3-319-67113-0"
}

@inproceedings{scratch,
 author = {Hermans, Felienne and Aivaloglou, Efthimia},
 title = {Teaching Software Engineering Principles to K-12 Students: A MOOC on Scratch},
 booktitle = {Proceedings of the 39th International Conference on Software Engineering: Software Engineering and Education Track},
 series = {ICSE-SEET '17},
 year = {2017},
 isbn = {978-1-5386-2671-9},
 location = {Buenos Aires, Argentina},
 pages = {13--22},
 numpages = {10},
 url = {https://doi.org/10.1109/ICSE-SEET.2017.13},
 doi = {10.1109/ICSE-SEET.2017.13},
 acmid = {3103033},
 publisher = {IEEE Press},
 address = {Piscataway, NJ, USA},
 keywords = {MOOC, code smells, dropout prediction, programming education, scratch},
} 

@inproceedings{redesign,
 author = {Stuurman, Sylvia and Passier, Harrie and Barendsen, Erik},
 title = {Analyzing Students' Software Redesign Strategies},
 booktitle = {Proceedings of the 16th Koli Calling International Conference on Computing Education Research},
 series = {Koli Calling '16},
 year = {2016},
 isbn = {978-1-4503-4770-9},
 location = {Koli, Finland},
 pages = {110--119},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/2999541.2999559},
 doi = {10.1145/2999541.2999559},
 acmid = {2999559},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {design patterns, education, procedural guidelines, redesign, refactoring},
} 
